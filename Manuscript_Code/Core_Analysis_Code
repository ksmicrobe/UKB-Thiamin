library(microbiomeMarker)
library(phyloseq)
library(microbiome)
library(tidyverse)
library(ggplot2)
library(microViz)
library(RColorBrewer)
library(rcartocolor)
library(rcompanion)
library(vegan)
library(wesanderson)
library(otu2ot)
library(speedyseq)
library(dada2)
library(readxl)
library(ggh4x)

#Be sure to download all rds objects and data tables from the "rds_objects" and "metadata_tables" directories, respectively. 

##########DNA-BASED Analysis

#####Section 1: Constructing phyloseq object with T. thermophilus absolute abundances as counts
raw_ps_gtdb <- readRDS("raw_ps_gtdb")
raw_ps_gtdb_Tt <- raw_ps_gtdb %>% subset_samples(dTRCs == "YES") %>% ps_filter() #subset to only samples that we care about (those with thiamin congeners measured)
raw_ps_gtdb_comp <- transform(raw_ps_gtdb_Tt, "compositional") #Need to make raw compositional phyloseq, subset the otu table, multiply this otu table by abs. abund., and remake phyloseq object 
abs_abund <- as.numeric(sample_data(raw_ps_gtdb_comp)$X16S_mL) 
comp_gtdb_ASV <- data.frame(t(otu_table(raw_ps_gtdb_comp)))
Tt_gtdb_ASV <- data.frame(mapply('*', comp_gtdb_ASV, abs_abund)) #Multiply total 16S copies/mL by each data frame cell (ASV relative abundances) to get individual ASV copies/mL
Tt_gtdb_ASV <- data.frame(t(Tt_gtdb_ASV))
Tt_gtdb_tax <- data.frame(tax_table(raw_ps_gtdb_comp))
Tt_gtdb_meta <- data.frame(sample_data(raw_ps_gtdb_comp))
rownames(Tt_gtdb_ASV) <- rownames(Tt_gtdb_tax)
colnames(Tt_gtdb_ASV) <- Tt_gtdb_meta$Sample
rownames(Tt_gtdb_meta) <- colnames(Tt_gtdb_ASV)

Tt_gtdb_ps <- phyloseq(tax_table(as.matrix(Tt_gtdb_tax)), #Do this after running below code!!
                      otu_table(as.matrix(Tt_gtdb_ASV), taxa_are_rows = T), 
                      sample_data(Tt_gtdb_meta))

good_seasons <- c(2,3)
good_type <- c("SW","HZ")

Tt_gtdb_ps <- Tt_gtdb_ps %>% 
  subset_taxa(!Kingdom %in% NA) %>% 
  subset_taxa(!Phylum %in% NA) %>% 
  subset_samples(Sampling %in% good_seasons) %>% 
  subset_samples(Type %in% good_type) %>% 
  ps_filter() #Final phyloseq used for absolute abundance figures; we don't need to worry about contaminants because we'll be subsetting specific taxa anyway. 
#####

#####Section 2: Assessing trends in 16S absolute abundances and thiamin congener concentrations
###Thiamin congener concentrations plot
ukb_dtrc_raw <- read_xlsx("~/OneDrive/ukb_dtrcs.xlsx") 
ukb_dtrc_raw$Event <- as.character(ukb_dtrc_raw$Event)
ukb_dtrc_raw$Component.Name <- factor(ukb_dtrc_raw$Component.Name, 
                                      levels = c("B1", "cHET", "HMP", "Baci", "HET", "AmMP"))

ukb_dtrc_raw <- ukb_dtrc_raw %>% rename(sample_num = "...1")

ukb_dtrc_raw$type <- factor(ukb_dtrc_raw$type, 
                                      levels = c("Spring", "Lake", "River", "Reservoir"))

ukb_dtrc_raw$avg <- as.numeric(ukb_dtrc_raw$avg)
ukb_dtrc_raw$site_code <- factor(ukb_dtrc_raw$site_code, 
                                 levels = c("SUS_HZ", "SUS_SW", "HAG", "PEL", 
                                            "HKM", "RSP", "WID", "LIN", 
                                            "WR", "WIR", "SPR", "CLR", "GBR"))

site_pal <- c("#e6194b", "#3cb44b", "#ffe119", "#4363d8", "#f58231", 
              "#911eb4", "#42d4f4", "#f032e6", "#575757", "black", 
              "#469990", "#00FF00", "#800000")

scientific_10 <- function(x) {
  parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x))) #To set log scale labels 
} #Formats log-scaled axes labels so they look better


ukb_dtrc_raw %>% mutate(across(Component.Name, str_replace, 'Baci', 'Bacimethrin'),
                        across(site_code, str_replace, '_', ' '),
                        across(Component.Name, str_replace, 'B1', 'Thiamin'),
                        Component.Name = factor(Component.Name, levels = 
                                                  c("Thiamin", "HET", "cHET", 
                                                    "AmMP", "HMP", "Bacimethrin")), 
                        site_code = factor(site_code, levels = 
                                             c("SUS HZ", "SUS SW", "HAG", "PEL", 
                                               "HKM", "RSP", "WID", "LIN", 
                                               "WR", "WIR", "SPR", "CLR", "GBR"))) %>% 
  ggplot(aes(x=type, y = avg)) +
  geom_boxplot(outliers = F) +
  geom_point(aes(color = site_code, shape = Event), size = 1.5) +
  facet_wrap(~Component.Name,scales="free_y", nrow = 1)+
  theme_bw() +
  labs(x = "", y = "pM") +
  theme(axis.text.x = element_text(angle = 45, hjust = .9), 
        strip.background = element_rect(fill = "white")) +
  scale_x_discrete(labels = c("Spring", "Lake", "River", "Reservoir")) +
  scale_color_manual(name = "Sample Site", values = site_pal) +
  scale_shape_discrete(labels = c("Pre-Bloom", "Bloom"), name = "Sampling Period") +
  ggh4x::facetted_pos_scales(y = list(
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e4)), 
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e4)),
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e4)),
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e3)),
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e3)), 
    scale_y_log10(labels = scientific_10, limits = c(1e-1,2e3))))
###

###Absolute Abundance
##Total 16S copies/mL in sites plot
Tt_data <- data.frame(read_excel("/Users/kellyshannon/Library/CloudStorage/OneDrive-Personal/Documents/UKB_Tt_for_R.xlsx"))
Tt_data <- Tt_data %>% mutate(across(X16S_mL:Ammonia, as.numeric)) %>% replace(is.na(.), 0)
Tt_data_dTRC <- Tt_data %>% dplyr::select(X16S_mL:HET)
Tt_data_dTRC_norm <- Tt_data_dTRC %>% mutate(across(X16S_mL:HET, log)) #Log transform data

cor.test(y=Tt_data_dTRC_norm$X16S_mL, x=Tt_data_dTRC_norm$B1, method = "pearson")
cor.test(y=Tt_data_dTRC_norm$X16S_mL, x=Tt_data_dTRC_norm$cHET, method = "pearson")
cor.test(y=Tt_data_dTRC_norm$X16S_mL[-25], x=Tt_data_dTRC_norm$HMP[-25], method = "pearson")
cor.test(y=Tt_data_dTRC_norm$X16S_mL, x=Tt_data_dTRC_norm$Baci, method = "pearson")
cor.test(y=Tt_data_dTRC_norm$X16S_mL, x=Tt_data_dTRC_norm$AmMP, method = "pearson")
cor.test(y=Tt_data_dTRC_norm$X16S_mL, x=Tt_data_dTRC_norm$HET, method = "pearson") #Tests for significant correlations between absolute abundance and thiamin congeners and bacimethrin

Tt_data %>% mutate(across(Site, str_replace, '_', ' '), 
                   Site = factor(Site, levels = 
                                             c("SUS HZ", "SUS SW", "HAG", "PEL", 
                                               "HKM", "RSP", "WID", "LIN", 
                                               "WR", "WIR", "SPR", "CLR", "GBR")),
                   Location = factor(Location, levels = 
                                       c("Spring", "Lake", "River", "Reservoir"))) %>% 
  ggplot(aes(x=Location, y = X16S_mL)) +
  geom_boxplot(outliers = F)+
  geom_point(aes(color = Site, shape = Season), size = 3, position = "jitter") +
  theme_bw() + labs(x = "", y = bquote('16S Copies '~mL^-1)) +
  scale_y_log10(breaks = c(10^2, 10^3, 10^4, 10^5, 10^6, 10^7),
                labels = trans_format("log10", math_format(10^.x))) +
  scale_color_manual(name = "Sample Site", values = site_pal) +
  scale_shape_discrete(labels = c("Spring", "Summer"), name = "Season") +
  theme(legend.position = "none")

Tt_data_dTRC$"Site" <- Tt_data$Site
Tt_data_dTRC %>% ggplot(aes(y = log(X16S_mL), x = log(B1), color = Site)) + 
  geom_point() + theme_classic() + stat_smooth(method = "lm", 
                                               col = "red", se = FALSE) +
  labs(y = bquote('16S Copies '~mL^-1), x = "Thiamin") +
  scale_color_manual(name = "Sample Site", values = site_pal) +
  theme(legend.position = "none") #Repeat this same code for each thiamin congener and bacimethrin; remember that axes are log-transformed
##

##CyanoHAB Absolute abundance plot
raw_phylo_noTt <- readRDS("raw_ps_UKB_noTt") %>% #calc compositions then add absolute abundances
  transform("compositional") %>% subset_samples(dTRCs == "YES") %>% ps_filter()


abs_abund <- sample_data(raw_phylo_noTt)$X16S_mL
counts_ps_Tt <- data.frame(otu_table(raw_phylo_noTt))
counts_ps_Tt_AA <- data.frame(mapply('*', counts_ps_Tt, abs_abund)) #Multiply relative abundances by total per-sample absolute abundances to get per-ASV absolute abundances
tax_ps_Tt <- data.frame(tax_table(raw_phylo_noTt))
rownames(counts_ps_Tt_AA) <- rownames(tax_ps_Tt)

ukb_abs_abund_ps <- phyloseq(tax_table(as.matrix(tax_ps_Tt)), 
                      otu_table(as.matrix(counts_ps_Tt_AA), taxa_are_rows = T), 
                      sample_data(sample_data(raw_phylo_noTt))) %>% 
  subset_taxa(!Family %in% "Mitochondria") %>% 
  subset_taxa(!Order %in% "Chloroplast") %>% 
  subset_taxa(!Kingdom %in% NA) %>% 
  subset_taxa(!Phylum %in% NA) #Don't worry about contaminants because we'll be just looking at Cyanos anyway

AA_ps_ukb_cyano <- ukb_abs_abund_ps %>% 
  subset_taxa(Phylum == "Cyanobacteria") #Abs. abund. phyloseq object with only cyanobacteria

Micro_ps <- phyloseq::subset_taxa(AA_ps_ukb_cyano, Genus == "Microcystis PCC-7914") %>%  
  phyloseq::transform_sample_counts(function(x) x/2)

AFA_ps <- phyloseq::subset_taxa(AA_ps_ukb_cyano, 
                                Genus == "Aphanizomenon MDT14a" | Genus == "Aphanizomenon NIES81") %>% 
  phyloseq::transform_sample_counts(function(x) x/5)

Dolicho_ps <- phyloseq::subset_taxa(AA_ps_ukb_cyano, 
                                    Genus == "Dolichospermum NIES41") %>% 
  phyloseq::transform_sample_counts(function(x) x/5)

HAB_genera <- c("Aphanizomenon MDT14a", "Aphanizomenon NIES81", 
                "Dolichospermum NIES41", "Microcystis PCC-7914")  
HABSeq <- AA_ps_ukb_cyano %>% subset_taxa(Genus %in% HAB_genera)        
HABSeq_gen <- aggregate_taxa(HABSeq, "Genus")
Micro <- colSums(data.frame(otu_table(HABSeq_gen))[1,])
AFA_MDT14a <- colSums(data.frame(otu_table(HABSeq_gen))[2,])
AFA_NIES81 <- colSums(data.frame(otu_table(HABSeq_gen))[3,])
Dolicho <- colSums(data.frame(otu_table(HABSeq_gen))[4,])

set.seed(1998)
cor.test(Nums$Micro, Nums$Bacimethrin, "spearman", alternative = "two.sided") 
cor.test(Nums$AFA_MDT14a, Nums$Bacimethrin, "spearman", alternative = "two.sided")
cor.test(Nums$AFA_NIES81, Nums$Bacimethrin, "spearman", alternative = "two.sided")
cor.test(Nums$Dolicho, Nums$Bacimethrin, "spearman", alternative = "two.sided") #Significant correlations between CyanoHAB abs. abund. and bacimethrin (untransformed concentration values)

cols <- distinct_palette(n = 4, add = NA)
samp_ord <- c("SUSSW3", "HAGSW3", "PELSW3", "HKMSW3", "RSPSW3", "WIDSW3", "LINSW3", "WRSW3", 
              "WIRSW3", "SPRSW3", "CLRSW3", "GBRSW3","SUSSW2", "HAGSW2", "PELSW2", "HKMSW2", 
              "RSPSW2", "WIDSW2", "LINSW2", "WRSW2", "WIRSW2", "SPRSW2", "CLRSW2", "GBRSW2")
tax_ord <- c("Dolichospermum NIES41 circinale", "Dolichospermum NIES41 crassum", 
             "Dolichospermum NIES41 sigmoideum", "Dolichospermum NIES41 spiroides", 
             "Dolichospermum NIES41 Genus", "Aphanizomenon MDT14a flos-aquae", 
             "Aphanizomenon NIES81 flos-aquae", "Aphanizomenon MDT14a Genus", 
             "Aphanizomenon NIES81 Genus", "Microcystis PCC-7914 aeruginosa", 
             "Microcystis PCC-7914 Genus")
HABSeq <- HABSeq %>% ps_reorder(sample_order = samp_ord) 
HABSeq <- HABSeq %>% tax_reorder(tax_order = tax_ord)

HABSeq %>% ps_mutate(across(Site, str_replace, "SW", "")) %>% 
  aggregate_taxa("Genus") %>% comp_heatmap(name = 'Cells per mL',
               tax_ser_counts = TRUE, sample_ser_counts = TRUE, 
               taxa_side = "left", cluster_rows = F, cluster_columns = F, 
               sample_ser_dist = "bray", tax_seriation = "Identity",
               sample_names_show = TRUE,
               colors = heat_palette(palette = rev(RColorBrewer::brewer.pal(7, "RdYlBu")), 
                                     breaks = c(0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6)), 
               heatmap_legend_param = 
                 list(at = c(0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6), break_dist = 1), 
               sample_anno = sampleAnnotation(Location = 
                                                anno_sample("Geography"),
                                              border = T), 
               sample_seriation = "Identity") #Color scheme changes each time; manuscript figure modified in powerpoint
##
###

###MicroViz plots
ps_gtdb <- readRDS("ps_gtdb")
ps_gtdb <- ps_gtdb %>% tax_fix(unknowns = NA)
ps_gtdb %>% ord_explore() #All plots made in the shiny app- Aitchison distance and PCoA

#Shiny app code: 
your_phyloseq %>%
 tax_transform(rank = "ASV", trans = "identity") %>%
 dist_calc(dist = "aitchison") %>%
 ord_calc(
  method = "PCoA"
 ) %>% 
 ord_plot(
  axes = c(1, 2),
  colour = "HAB_biomass", fill = "HAB_biomass",
  shape = "Location", alpha = 0.8,
  size = 3
 ) + 
 scale_shape_girafe_filled() +
 stat_chull(
  ggplot2::aes(colour = HAB_biomass)
 )

#For stacked barplots, set "Site" as labels, "HAB_biomass" as facets, and Family (top 17) as rank
###
##########

##########RNA-BASED Analysis
###mRNA taxonomy-based ordination and taxonomy plots 
cosmos_taxa <- data.frame(read_excel(path = "/Users/kellyshannon/Library/CloudStorage/OneDrive-Personal/Documents/cosmosID_taxa.xlsx"))
cosmos_counts <- data.frame(read_excel(path = "/Users/kellyshannon/Library/CloudStorage/OneDrive-Personal/Documents/cosmosID_counts.xlsx"))

rna_samples <- colnames(cosmos_counts)
location <- c("Reservoir", "Reservoir", "River", "Lake", "Lake", "Lake", "Lake", "River", 
              "Reservoir", "Reservoir", "Spring", "Lake", "River", "Lake", "River", "Lake")
bloom <- c("High", "High", "High", "High", "High", "High", "Low", "Low", 
              "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low")

HAB_biomass <- as.numeric(c(1.020527e+06, 1.688248e+03, 7.544576e+04, 2.411194e+04, 2.258718e+04, 2.283112e+05, 
                            6.831346e+02, 1.673012e+02, 8.765233e+01, 1.342924e+03, 9.861321e+00, 1.084612e+01, 
                            0.000000e+00, 0.000000e+00, 9.150774e+00, 7.307005e+01))

Baci <- as.numeric(c(7.5035439999999998, 10.287667669999999, 27.86715667, 8.3449735, 
                     3.1907813329999999, 6.1613815000000001, 3.1686746669999999, 12.87204867, 
                     2.1525919999999998, 8.9936463329999992, 0.190109, 5.1231766670000001, 
                     1.390201333, 2.8010704999999998, 3.1831489999999998, 1.4036785000000001))

cosmos_meta <- data.frame(Sample = rna_samples, Location = location, 
                          Bloom = bloom, HAB_biomass = HAB_biomass, Bacimethrin = Baci)

rownames(cosmos_meta) <- colnames(cosmos_counts)

cosmos_seq <- phyloseq(otu_table(as.matrix(cosmos_counts), taxa_are_rows = T), 
                       tax_table(as.matrix(cosmos_taxa)), sample_data(cosmos_meta)) %>% 
  subset_taxa(!Genus %in% "Thermus")
cosmos_seq %>% ord_explore() #Generate the same PCoA and stacked barplot as the previous 16S section (same parameters)
                             #For ordination, species-level and set colour to "Bloom"
###

###Redundancy analysis
dat <- data.frame(sample_data(ps_gtdb)) %>% dplyr::select(Site, Location, X16S_mL, B1, HMP,
                                                   AmMP, cHET, HET, Phosphate, Nitrite_Nitrate, 
                                                   Ammonia, Temp, DO, Baci, HAB_biomass, Season)
rownames(dat) <- dat$Site
dat2 <- data.frame(sample_data(cosmos_seq)) %>% rename(Site = Sample)

dat_tot <- left_join(dat2, dat, by = "Site")
rownames(dat_tot) <- dat_tot$Site

cosmos_seq_rda <- cosmos_seq %>% aggregate_taxa("Strain") %>% transform("clr")
rda_rna_mat <- data.frame(otu_table(cosmos_seq_rda))
rda_rna_mat <- as.matrix(t(rda_rna_mat))
dat_tot <- dat_tot %>% mutate(HAB = str_replace(HAB_biomass.y, "High", "1"), 
                   HAB = str_replace(HAB, "Low", "0"), 
                   season = str_replace(Season, "Spring", "0"), 
                   season = str_replace(season, "Summer", "1"))
dat_rda <- dat_tot[,c(5,7:17, 21,22)] %>% mutate(across(X16S_mL:season, as.numeric))
dat_rda <- dat_rda %>% mutate(NP = (sum(Nitrite_Nitrate,Ammonia)/Phosphate), 
                   NP = str_replace(NP, "Inf", "0"), 
                   across(NP, as.numeric))

set.seed(2003)
rda <- rda(rda_rna_mat ~ log(HMP+AmMP) + log(Baci) + DO +
             log(B1) + log(cHET+HET) + HAB + season, 
           data = dat_rda, z = c(X16S_mL))

anova.cca(rda) #0.00
set.seed(1091)
anova.cca(rda, by = "term", permutations = 10000)
vif.cca(rda) #Check for degree of multicollinearity
RsquareAdj(rda) #Gives actual quantitative values of the model
###


























